#include "silly.h"
#include "term.h"
#include "ansi.h"

#include <d2d1.h>
#include <Dwrite.h>
#include <assert.h>

const struct rgb colors[256] = {
  { 0.0f, 0.0f, 0.0f },
  { 0.5f, 0.0f, 0.0f },
  { 0.0f, 0.5f, 0.0f },
  { 0.5f, 0.5f, 0.0f },
  { 0.0f, 0.0f, 0.5f },
  { 0.5f, 0.0f, 0.5f },
  { 0.0f, 0.5f, 0.5f },
  { 0.75f, 0.75f, 0.75f },
  { 0.5f, 0.5f, 0.5f },
  { 0.99609375f, 0.0f, 0.0f },
  { 0.0f, 0.99609375f, 0.0f },
  { 0.99609375f, 0.99609375f, 0.0f },
  { 0.0f, 0.0f, 0.99609375f },
  { 0.99609375f, 0.0f, 0.99609375f },
  { 0.0f, 0.99609375f, 0.99609375f },
  { 0.99609375f, 0.99609375f, 0.99609375f },
  { 0.0f, 0.0f, 0.0f },
  { 0.0f, 0.0f, 0.37109375f },
  { 0.0f, 0.0f, 0.52734375f },
  { 0.0f, 0.0f, 0.68359375f },
  { 0.0f, 0.0f, 0.83984375f },
  { 0.0f, 0.0f, 0.99609375f },
  { 0.0f, 0.37109375f, 0.0f },
  { 0.0f, 0.37109375f, 0.37109375f },
  { 0.0f, 0.37109375f, 0.52734375f },
  { 0.0f, 0.37109375f, 0.68359375f },
  { 0.0f, 0.37109375f, 0.83984375f },
  { 0.0f, 0.37109375f, 0.99609375f },
  { 0.0f, 0.52734375f, 0.0f },
  { 0.0f, 0.52734375f, 0.37109375f },
  { 0.0f, 0.52734375f, 0.52734375f },
  { 0.0f, 0.52734375f, 0.68359375f },
  { 0.0f, 0.52734375f, 0.83984375f },
  { 0.0f, 0.52734375f, 0.99609375f },
  { 0.0f, 0.68359375f, 0.0f },
  { 0.0f, 0.68359375f, 0.37109375f },
  { 0.0f, 0.68359375f, 0.52734375f },
  { 0.0f, 0.68359375f, 0.68359375f },
  { 0.0f, 0.68359375f, 0.83984375f },
  { 0.0f, 0.68359375f, 0.99609375f },
  { 0.0f, 0.83984375f, 0.0f },
  { 0.0f, 0.83984375f, 0.37109375f },
  { 0.0f, 0.83984375f, 0.52734375f },
  { 0.0f, 0.83984375f, 0.68359375f },
  { 0.0f, 0.83984375f, 0.83984375f },
  { 0.0f, 0.83984375f, 0.99609375f },
  { 0.0f, 0.99609375f, 0.0f },
  { 0.0f, 0.99609375f, 0.37109375f },
  { 0.0f, 0.99609375f, 0.52734375f },
  { 0.0f, 0.99609375f, 0.68359375f },
  { 0.0f, 0.99609375f, 0.83984375f },
  { 0.0f, 0.99609375f, 0.99609375f },
  { 0.37109375f, 0.0f, 0.0f },
  { 0.37109375f, 0.0f, 0.37109375f },
  { 0.37109375f, 0.0f, 0.52734375f },
  { 0.37109375f, 0.0f, 0.68359375f },
  { 0.37109375f, 0.0f, 0.83984375f },
  { 0.37109375f, 0.0f, 0.99609375f },
  { 0.37109375f, 0.37109375f, 0.0f },
  { 0.37109375f, 0.37109375f, 0.37109375f },
  { 0.37109375f, 0.37109375f, 0.52734375f },
  { 0.37109375f, 0.37109375f, 0.68359375f },
  { 0.37109375f, 0.37109375f, 0.83984375f },
  { 0.37109375f, 0.37109375f, 0.99609375f },
  { 0.37109375f, 0.52734375f, 0.0f },
  { 0.37109375f, 0.52734375f, 0.37109375f },
  { 0.37109375f, 0.52734375f, 0.52734375f },
  { 0.37109375f, 0.52734375f, 0.68359375f },
  { 0.37109375f, 0.52734375f, 0.83984375f },
  { 0.37109375f, 0.52734375f, 0.99609375f },
  { 0.37109375f, 0.68359375f, 0.0f },
  { 0.37109375f, 0.68359375f, 0.37109375f },
  { 0.37109375f, 0.68359375f, 0.52734375f },
  { 0.37109375f, 0.68359375f, 0.68359375f },
  { 0.37109375f, 0.68359375f, 0.83984375f },
  { 0.37109375f, 0.68359375f, 0.99609375f },
  { 0.37109375f, 0.83984375f, 0.0f },
  { 0.37109375f, 0.83984375f, 0.37109375f },
  { 0.37109375f, 0.83984375f, 0.52734375f },
  { 0.37109375f, 0.83984375f, 0.68359375f },
  { 0.37109375f, 0.83984375f, 0.83984375f },
  { 0.37109375f, 0.83984375f, 0.99609375f },
  { 0.37109375f, 0.99609375f, 0.0f },
  { 0.37109375f, 0.99609375f, 0.37109375f },
  { 0.37109375f, 0.99609375f, 0.52734375f },
  { 0.37109375f, 0.99609375f, 0.68359375f },
  { 0.37109375f, 0.99609375f, 0.83984375f },
  { 0.37109375f, 0.99609375f, 0.99609375f },
  { 0.52734375f, 0.0f, 0.0f },
  { 0.52734375f, 0.0f, 0.37109375f },
  { 0.52734375f, 0.0f, 0.52734375f },
  { 0.52734375f, 0.0f, 0.68359375f },
  { 0.52734375f, 0.0f, 0.83984375f },
  { 0.52734375f, 0.0f, 0.99609375f },
  { 0.52734375f, 0.37109375f, 0.0f },
  { 0.52734375f, 0.37109375f, 0.37109375f },
  { 0.52734375f, 0.37109375f, 0.52734375f },
  { 0.52734375f, 0.37109375f, 0.68359375f },
  { 0.52734375f, 0.37109375f, 0.83984375f },
  { 0.52734375f, 0.37109375f, 0.99609375f },
  { 0.52734375f, 0.52734375f, 0.0f },
  { 0.52734375f, 0.52734375f, 0.37109375f },
  { 0.52734375f, 0.52734375f, 0.52734375f },
  { 0.52734375f, 0.52734375f, 0.68359375f },
  { 0.52734375f, 0.52734375f, 0.83984375f },
  { 0.52734375f, 0.52734375f, 0.99609375f },
  { 0.52734375f, 0.68359375f, 0.0f },
  { 0.52734375f, 0.68359375f, 0.37109375f },
  { 0.52734375f, 0.68359375f, 0.52734375f },
  { 0.52734375f, 0.68359375f, 0.68359375f },
  { 0.52734375f, 0.68359375f, 0.83984375f },
  { 0.52734375f, 0.68359375f, 0.99609375f },
  { 0.52734375f, 0.83984375f, 0.0f },
  { 0.52734375f, 0.83984375f, 0.37109375f },
  { 0.52734375f, 0.83984375f, 0.52734375f },
  { 0.52734375f, 0.83984375f, 0.68359375f },
  { 0.52734375f, 0.83984375f, 0.83984375f },
  { 0.52734375f, 0.83984375f, 0.99609375f },
  { 0.52734375f, 0.99609375f, 0.0f },
  { 0.52734375f, 0.99609375f, 0.37109375f },
  { 0.52734375f, 0.99609375f, 0.52734375f },
  { 0.52734375f, 0.99609375f, 0.68359375f },
  { 0.52734375f, 0.99609375f, 0.83984375f },
  { 0.52734375f, 0.99609375f, 0.99609375f },
  { 0.68359375f, 0.0f, 0.0f },
  { 0.68359375f, 0.0f, 0.37109375f },
  { 0.68359375f, 0.0f, 0.52734375f },
  { 0.68359375f, 0.0f, 0.68359375f },
  { 0.68359375f, 0.0f, 0.83984375f },
  { 0.68359375f, 0.0f, 0.99609375f },
  { 0.68359375f, 0.37109375f, 0.0f },
  { 0.68359375f, 0.37109375f, 0.37109375f },
  { 0.68359375f, 0.37109375f, 0.52734375f },
  { 0.68359375f, 0.37109375f, 0.68359375f },
  { 0.68359375f, 0.37109375f, 0.83984375f },
  { 0.68359375f, 0.37109375f, 0.99609375f },
  { 0.68359375f, 0.52734375f, 0.0f },
  { 0.68359375f, 0.52734375f, 0.37109375f },
  { 0.68359375f, 0.52734375f, 0.52734375f },
  { 0.68359375f, 0.52734375f, 0.68359375f },
  { 0.68359375f, 0.52734375f, 0.83984375f },
  { 0.68359375f, 0.52734375f, 0.99609375f },
  { 0.68359375f, 0.68359375f, 0.0f },
  { 0.68359375f, 0.68359375f, 0.37109375f },
  { 0.68359375f, 0.68359375f, 0.52734375f },
  { 0.68359375f, 0.68359375f, 0.68359375f },
  { 0.68359375f, 0.68359375f, 0.83984375f },
  { 0.68359375f, 0.68359375f, 0.99609375f },
  { 0.68359375f, 0.83984375f, 0.0f },
  { 0.68359375f, 0.83984375f, 0.37109375f },
  { 0.68359375f, 0.83984375f, 0.52734375f },
  { 0.68359375f, 0.83984375f, 0.68359375f },
  { 0.68359375f, 0.83984375f, 0.83984375f },
  { 0.68359375f, 0.83984375f, 0.99609375f },
  { 0.68359375f, 0.99609375f, 0.0f },
  { 0.68359375f, 0.99609375f, 0.37109375f },
  { 0.68359375f, 0.99609375f, 0.52734375f },
  { 0.68359375f, 0.99609375f, 0.68359375f },
  { 0.68359375f, 0.99609375f, 0.83984375f },
  { 0.68359375f, 0.99609375f, 0.99609375f },
  { 0.83984375f, 0.0f, 0.0f },
  { 0.83984375f, 0.0f, 0.37109375f },
  { 0.83984375f, 0.0f, 0.52734375f },
  { 0.83984375f, 0.0f, 0.68359375f },
  { 0.83984375f, 0.0f, 0.83984375f },
  { 0.83984375f, 0.0f, 0.99609375f },
  { 0.83984375f, 0.37109375f, 0.0f },
  { 0.83984375f, 0.37109375f, 0.37109375f },
  { 0.83984375f, 0.37109375f, 0.52734375f },
  { 0.83984375f, 0.37109375f, 0.68359375f },
  { 0.83984375f, 0.37109375f, 0.83984375f },
  { 0.83984375f, 0.37109375f, 0.99609375f },
  { 0.83984375f, 0.52734375f, 0.0f },
  { 0.83984375f, 0.52734375f, 0.37109375f },
  { 0.83984375f, 0.52734375f, 0.52734375f },
  { 0.83984375f, 0.52734375f, 0.68359375f },
  { 0.83984375f, 0.52734375f, 0.83984375f },
  { 0.83984375f, 0.52734375f, 0.99609375f },
  { 0.83984375f, 0.68359375f, 0.0f },
  { 0.83984375f, 0.68359375f, 0.37109375f },
  { 0.83984375f, 0.68359375f, 0.52734375f },
  { 0.83984375f, 0.68359375f, 0.68359375f },
  { 0.83984375f, 0.68359375f, 0.83984375f },
  { 0.83984375f, 0.68359375f, 0.99609375f },
  { 0.83984375f, 0.83984375f, 0.0f },
  { 0.83984375f, 0.83984375f, 0.37109375f },
  { 0.83984375f, 0.83984375f, 0.52734375f },
  { 0.83984375f, 0.83984375f, 0.68359375f },
  { 0.83984375f, 0.83984375f, 0.83984375f },
  { 0.83984375f, 0.83984375f, 0.99609375f },
  { 0.83984375f, 0.99609375f, 0.0f },
  { 0.83984375f, 0.99609375f, 0.37109375f },
  { 0.83984375f, 0.99609375f, 0.52734375f },
  { 0.83984375f, 0.99609375f, 0.68359375f },
  { 0.83984375f, 0.99609375f, 0.83984375f },
  { 0.83984375f, 0.99609375f, 0.99609375f },
  { 0.99609375f, 0.0f, 0.0f },
  { 0.99609375f, 0.0f, 0.37109375f },
  { 0.99609375f, 0.0f, 0.52734375f },
  { 0.99609375f, 0.0f, 0.68359375f },
  { 0.99609375f, 0.0f, 0.83984375f },
  { 0.99609375f, 0.0f, 0.99609375f },
  { 0.99609375f, 0.37109375f, 0.0f },
  { 0.99609375f, 0.37109375f, 0.37109375f },
  { 0.99609375f, 0.37109375f, 0.52734375f },
  { 0.99609375f, 0.37109375f, 0.68359375f },
  { 0.99609375f, 0.37109375f, 0.83984375f },
  { 0.99609375f, 0.37109375f, 0.99609375f },
  { 0.99609375f, 0.52734375f, 0.0f },
  { 0.99609375f, 0.52734375f, 0.37109375f },
  { 0.99609375f, 0.52734375f, 0.52734375f },
  { 0.99609375f, 0.52734375f, 0.68359375f },
  { 0.99609375f, 0.52734375f, 0.83984375f },
  { 0.99609375f, 0.52734375f, 0.99609375f },
  { 0.99609375f, 0.68359375f, 0.0f },
  { 0.99609375f, 0.68359375f, 0.37109375f },
  { 0.99609375f, 0.68359375f, 0.52734375f },
  { 0.99609375f, 0.68359375f, 0.68359375f },
  { 0.99609375f, 0.68359375f, 0.83984375f },
  { 0.99609375f, 0.68359375f, 0.99609375f },
  { 0.99609375f, 0.83984375f, 0.0f },
  { 0.99609375f, 0.83984375f, 0.37109375f },
  { 0.99609375f, 0.83984375f, 0.52734375f },
  { 0.99609375f, 0.83984375f, 0.68359375f },
  { 0.99609375f, 0.83984375f, 0.83984375f },
  { 0.99609375f, 0.83984375f, 0.99609375f },
  { 0.99609375f, 0.99609375f, 0.0f },
  { 0.99609375f, 0.99609375f, 0.37109375f },
  { 0.99609375f, 0.99609375f, 0.52734375f },
  { 0.99609375f, 0.99609375f, 0.68359375f },
  { 0.99609375f, 0.99609375f, 0.83984375f },
  { 0.99609375f, 0.99609375f, 0.99609375f },
  { 0.03125f, 0.03125f, 0.03125f },
  { 0.0703125f, 0.0703125f, 0.0703125f },
  { 0.109375f, 0.109375f, 0.109375f },
  { 0.1484375f, 0.1484375f, 0.1484375f },
  { 0.1875f, 0.1875f, 0.1875f },
  { 0.2265625f, 0.2265625f, 0.2265625f },
  { 0.265625f, 0.265625f, 0.265625f },
  { 0.3046875f, 0.3046875f, 0.3046875f },
  { 0.34375f, 0.34375f, 0.34375f },
  { 0.3828125f, 0.3828125f, 0.3828125f },
  { 0.421875f, 0.421875f, 0.421875f },
  { 0.4609375f, 0.4609375f, 0.4609375f },
  { 0.5f, 0.5f, 0.5f },
  { 0.5390625f, 0.5390625f, 0.5390625f },
  { 0.578125f, 0.578125f, 0.578125f },
  { 0.6171875f, 0.6171875f, 0.6171875f },
  { 0.65625f, 0.65625f, 0.65625f },
  { 0.6953125f, 0.6953125f, 0.6953125f },
  { 0.734375f, 0.734375f, 0.734375f },
  { 0.7734375f, 0.7734375f, 0.7734375f },
  { 0.8125f, 0.8125f, 0.8125f },
  { 0.8515625f, 0.8515625f, 0.8515625f },
  { 0.890625f, 0.890625f, 0.890625f },
  { 0.9296875f, 0.9296875f, 0.9296875f }
};

TSTATE ts;
UINT32 CELL_WIDTH = 0;
UINT32 CELL_HEIGHT = 0;


extern ID2D1Factory * pD2DFactory_;
extern IDWriteFactory * pDWriteFactory_;

static void TerminalScreenInit(unsigned cols, unsigned rows){
  ts.cols = cols;
  ts.rows = rows;


  ts.lines = new TLINE[rows];
  //ts.lines = (TLINE*)HeapAlloc(GetProcessHeap(), 0, sizeof(TLINE) * rows);
  assert(ts.lines != NULL);

  for(UINT32 i=0; i<rows; i++){
    ts.lines[i].cells = new TCELL[cols];
    // ts.lines[i].cells = (TCELL*)HeapAlloc(GetProcessHeap(), 0, sizeof(TCELL) * cols);
    ZeroMemory(ts.lines[i].cells,  sizeof(TCELL) * cols);
    assert(ts.lines[i].cells != NULL);

    for(UINT32 j=0; j<cols; j++){
      ts.lines[i].cells[j].fgColor = colors[15];
      ts.lines[i].cells[j].bgColor = colors[0];
    }

    ts.lines[i].dirty = TRUE;
  }
}


static void TerminalIncLine(){
  if(ts.cy+1 < ts.rows){
    ts.cy++;
  }else{
    // scroll buffer

    // instead of copying the memory line by line, just
    // rearrange the pointers to point to the next line;
    // delete the first line and create a new allocation for the last line
    // HeapFree(GetProcessHeap(), 0, ts.lines[0].cells);

    delete [] ts.lines[0].cells;

    UINT32 i=0;
    for(;i<ts.rows-1; i++){
      ts.lines[i].cells =  ts.lines[i+1].cells;
      ts.lines[i].dirty = TRUE;
    }

    //size_t sz = sizeof(TCELL)  * ts.cols;
    ts.lines[i].cells = new TCELL[ts.cols];
    for(UINT32 j=0; j<ts.cols; j++){
      ts.lines[i].cells[j].fgColor = colors[15];
      ts.lines[i].cells[j].bgColor = colors[0];
      ts.lines[i].cells[j].character = ' ';
    }
  }

  ts.cx = 0;
}



VOID TerminalWrite(const wchar_t * buf, UINT32 len){
    for(UINT32 i=0; i<len; i++){
      if(buf[i] == '\n') TerminalIncLine();
      else vt_handle_code((UINT32)buf[i]);

      // OutputDebugStringA((LPCSTR)&buf[i]);
      // OutputDebugStringA("\n");
    }
}


static void GetCellDimensions(const wchar_t wc){

  extern IDWriteTextFormat* pTextFormat_;
  extern IDWriteFactory * pDWriteFactory_;
  IDWriteTextLayout * tl;
  HRESULT hr = pDWriteFactory_->CreateTextLayout(&wc,
						 1,
						 pTextFormat_,
						 INT_MAX,
						 INT_MAX,
						 &tl);

  DWRITE_TEXT_METRICS  metrics;
  tl->GetMetrics(&metrics);

  CELL_WIDTH = (UINT32)metrics.widthIncludingTrailingWhitespace;
  CELL_HEIGHT = (UINT32)metrics.height;

  return;
}


HRESULT TerminalInit(HWND hwnd){

  vt_init();


  ts.cx = ts.cy = 0;
  ts.showCursor = TRUE;


  RECT rc;
  GetClientRect(hwnd, &rc);

  GetCellDimensions('W');

  int winWidth = rc.right-rc.left;
  int winHeight = rc.bottom-rc.top;

  ts.fontWidth = (UINT32)CELL_WIDTH;
  ts.fontHeight = (UINT32)CELL_HEIGHT;

  int cols = winWidth/ts.fontWidth;
  int rows = winHeight/ts.fontHeight;

  TerminalScreenInit(cols, rows);

  return S_OK;
}
